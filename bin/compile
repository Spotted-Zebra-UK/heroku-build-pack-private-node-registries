#!/usr/bin/env bash

set -e
set -o pipefail

readonly BUILD_DIR=$1
readonly CACHE_DIR=$2
readonly ENV_DIR=$3

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

echo 'Setting up private NPM registries.' | indent

if [[ ! -n "${BUILD_DIR}" ]]; then
  echo "Failed! No build directory specified." | indent
  exit 1
fi

cd ${BUILD_DIR}

if [ ! -f ${ENV_DIR}/NPM_REGISTRIES ]; then
  echo "Failed! Variable \$NPM_REGISTRIES not set." | indent
  exit 1
fi

# Delete the .npmrc that might already exist
if [ -f .npmrc ]; then
  rm -rf .npmrc
fi

touch .npmrc

# Convert the semi-colon separated string into array of multiple registries
IFS=';' read -ra REGISTRIES <<< "$NPM_REGISTRIES"

for registry in "${REGISTRIES[@]}"; do
  # Convert the pipe separated string into array of registry, scope and token
  IFS='|' read -ra SCOPE <<< "$registry"

  namespace=${SCOPE[0]}

  if [[ ! -n "${namespace}" ]]; then
    echo "Failed! No namespace specified for $registry" | indent
    rm -rf .npmrc
    exit 1
  fi

  url=${SCOPE[1]}

  if [[ ! -n "${url}" ]]; then
    echo "Failed! No url specified for $registry" | indent
    rm -rf .npmrc
    exit 1
  fi

  trimmed_url="${url#http*://}"
  token=${SCOPE[2]}

  if [[ ! -n "${token}" ]]; then
    echo "Failed! No token specified for $registry" | indent
    rm -rf .npmrc
    exit 1
  fi

cat >> .npmrc << EOL
@${namespace}:registry=${url}
//${trimmed_url}:_authToken=${token}
EOL
done

echo "" | indent
cat .npmrc | indent
echo "" | indent

echo "Done!" | indent
exit 0
